'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _utils = require('../utils');

var _TransactionLifeCycle2 = require('../eth/TransactionLifeCycle');

var _TransactionLifeCycle3 = _interopRequireDefault(_TransactionLifeCycle2);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _Currency = require('./Currency');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('dai:transactionObject');

var TransactionObject = function (_TransactionLifeCycle) {
  (0, _inherits3.default)(TransactionObject, _TransactionLifeCycle);

  function TransactionObject(transaction, web3Service, nonceService) {
    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        businessObject = _ref.businessObject,
        metadata = _ref.metadata;

    (0, _classCallCheck3.default)(this, TransactionObject);

    var _this = (0, _possibleConstructorReturn3.default)(this, (TransactionObject.__proto__ || (0, _getPrototypeOf2.default)(TransactionObject)).call(this, businessObject));

    _this._transaction = transaction;
    _this._web3Service = web3Service;
    _this._nonceService = nonceService;
    _this._ethersProvider = web3Service.ethersProvider();
    _this._timeStampSubmitted = new Date();
    _this.metadata = metadata;
    _this._confirmedBlockCount = _this._web3Service.confirmedBlockCount();
    return _this;
  }

  (0, _createClass3.default)(TransactionObject, [{
    key: 'timeStampSubmitted',
    value: function timeStampSubmitted() {
      return this._timeStampSubmitted;
    }
  }, {
    key: 'timeStamp',
    value: function timeStamp() {
      return this._timeStampMined;
    }
  }, {
    key: 'fees',
    value: function fees() {
      return this._fees;
    }
  }, {
    key: 'mine',
    value: function mine() {
      var _this2 = this;

      if (!this._dataPromise) this._dataPromise = this._getTransactionData();
      return this._dataPromise.then(function () {
        return _this2._returnValue();
      });
    }
  }, {
    key: 'confirm',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._confirmedBlockCount;
        var newBlockNumber, newReceipt;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.mine();

              case 2:
                if (!(parseInt(count) <= 0)) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt('return');

              case 4:
                newBlockNumber = this.receipt.blockNumber + count;
                _context.next = 7;
                return this._web3Service.waitForBlockNumber(newBlockNumber);

              case 7:
                _context.next = 9;
                return this._ethersProvider.getTransactionReceipt(this.hash);

              case 9:
                newReceipt = _context.sent;

                if (!(newReceipt.blockHash !== this.receipt.blockHash)) {
                  _context.next = 12;
                  break;
                }

                throw new Error('transaction block hash changed');

              case 12:
                this.setFinalized();
                return _context.abrupt('return', this._returnValue());

              case 14:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function confirm() {
        return _ref2.apply(this, arguments);
      }

      return confirm;
    }()
  }, {
    key: '_getTransactionData',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var gasPrice, tx, i, startTime, elapsed, revertMsg;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                gasPrice = null;
                _context2.next = 4;
                return this._transaction;

              case 4:
                tx = _context2.sent;

                this.hash = tx.hash;
                this.setPending(); // set state to pending

                // when you're on a local testnet, a single call to getTransaction should
                // be enough. but on a remote net, it may take multiple calls.
                i = 0;

              case 8:
                if (!(i < 10)) {
                  _context2.next = 19;
                  break;
                }

                _context2.next = 11;
                return this._ethersProvider.getTransaction(this.hash);

              case 11:
                tx = _context2.sent;

                if (!tx) {
                  _context2.next = 14;
                  break;
                }

                return _context2.abrupt('break', 19);

              case 14:
                _context2.next = 16;
                return (0, _utils.promiseWait)(1500);

              case 16:
                i++;
                _context2.next = 8;
                break;

              case 19:
                if (tx) {
                  _context2.next = 21;
                  break;
                }

                throw new Error('Tried getTransaction 10 times and still failed');

              case 21:
                if (tx.blockHash) {
                  _context2.next = 29;
                  break;
                }

                startTime = new Date();

                log('waitForTransaction ' + this.hash);
                _context2.next = 26;
                return this._ethersProvider.waitForTransaction(this.hash);

              case 26:
                tx = _context2.sent;
                elapsed = (new Date() - startTime) / 1000;

                log('waitForTransaction ' + this.hash + ' done in ' + elapsed + 's');

              case 29:

                gasPrice = tx.gasPrice;
                this._timeStampMined = new Date();
                _context2.next = 33;
                return this._waitForReceipt();

              case 33:
                this.receipt = _context2.sent;


                if (!!this.receipt.gasUsed && !!gasPrice) {
                  this._fees = _Currency.ETH.wei(this.receipt.gasUsed.mul(gasPrice));
                } else {
                  /*
                    console.warn('Unable to calculate transaction fee. Gas usage or price is unavailable. Usage = ',
                      receipt.gasUsed ? receipt.gasUsed.toString() : '<not set>',
                      'Price = ', gasPrice ? gasPrice.toString() : '<not set>'
                    );
                  */
                }

                if (!(this.receipt.status == '0x1' || this.receipt.status == 1)) {
                  _context2.next = 39;
                  break;
                }

                this.setMined();
                _context2.next = 42;
                break;

              case 39:
                //transaction reverted
                revertMsg = 'transaction with hash ' + this.hash + ' reverted';

                log(revertMsg);
                throw new Error(revertMsg);

              case 42:
                _context2.next = 50;
                break;

              case 44:
                _context2.prev = 44;
                _context2.t0 = _context2['catch'](0);
                _context2.next = 48;
                return this._nonceService.setCounts();

              case 48:
                this.setError(_context2.t0);
                throw _context2.t0;

              case 50:
                return _context2.abrupt('return', this);

              case 51:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 44]]);
      }));

      function _getTransactionData() {
        return _ref3.apply(this, arguments);
      }

      return _getTransactionData;
    }()
  }, {
    key: '_waitForReceipt',
    value: function _waitForReceipt() {
      var _this3 = this;

      var retries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;

      var result = _promise2.default.resolve(this._ethersProvider.getTransactionReceipt(this.hash));

      if (retries < 1) return result;
      return result.then(function (receipt) {
        if (receipt) return receipt;

        // console.warn(`Receipt is null. Retrying ${retries} more time(s)`);
        return (0, _utils.promiseWait)((6 - retries) * 1500).then(function () {
          return _this3._waitForReceipt(retries - 1);
        });
      });
    }
  }]);
  return TransactionObject;
}(_TransactionLifeCycle3.default);

exports.default = TransactionObject;