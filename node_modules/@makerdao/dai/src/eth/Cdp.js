'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _contracts = require('../../contracts/contracts');

var _contracts2 = _interopRequireDefault(_contracts);

var _ethers = require('ethers');

var _Currency = require('./Currency');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Cdp = function () {
  function Cdp(cdpService) {
    var _this = this;

    var cdpId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck3.default)(this, Cdp);

    this._cdpService = cdpService;
    this._smartContractService = this._cdpService.get('smartContract');

    if (!cdpId) {
      this._create();
    } else {
      this.id = cdpId;
    }

    this._emitterInstance = this._cdpService.get('event').buildEmitter();
    this.on = this._emitterInstance.on;
    this._emitterInstance.registerPollEvents({
      COLLATERAL: {
        USD: function USD() {
          return _this.getCollateralValue(_Currency.USD);
        },
        ETH: function ETH() {
          return _this.getCollateralValue();
        }
      },
      DEBT: {
        dai: function dai() {
          return _this.getDebtValue();
        }
      }
    });
  }

  (0, _createClass3.default)(Cdp, [{
    key: '_create',
    value: function _create() {
      var _this2 = this;

      var tubContract = this._smartContractService.getContractByName(_contracts2.default.SAI_TUB);

      var currentAccount = this._smartContractService.get('web3').currentAccount();

      var getId = new _promise2.default(function (resolve) {
        tubContract.onlognewcup = function (address, cdpIdBytes32) {
          if (currentAccount.toLowerCase() == address.toLowerCase()) {
            this.removeListener();
            resolve(_ethers.utils.bigNumberify(cdpIdBytes32).toNumber());
          }
        };
      });

      var promise = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var results;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return 0;

              case 2:
                _context.next = 4;
                return _promise2.default.all([getId, tubContract.open({ promise: promise })]);

              case 4:
                results = _context.sent;

                _this2.id = results[0];
                return _context.abrupt('return', _this2);

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }))();

      this._transactionObject = promise;
    }
  }, {
    key: 'transactionObject',
    value: function transactionObject() {
      return this._transactionObject;
    }
  }, {
    key: 'getId',
    value: function getId() {
      console.warn('getId() is deprecated; use the .id property instead');
      return _promise2.default.resolve(this.id);
    }
  }]);
  return Cdp;
}();

// each of these methods just calls the method of the same name on the service
// with the cdp's id as the first argument


exports.default = Cdp;
var passthroughMethods = ['bite', 'drawDai', 'enoughMkrToWipe', 'freeEth', 'freePeth', 'getCollateralValue', 'getCollateralizationRatio', 'getDebtValue', 'getGovernanceFee', 'getInfo', 'getLiquidationPrice', 'give', 'isSafe', 'lockEth', 'lockPeth', 'lockWeth', 'shut', 'wipeDai'];

(0, _assign2.default)(Cdp.prototype, passthroughMethods.reduce(function (acc, name) {
  acc[name] = function () {
    var _cdpService;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_cdpService = this._cdpService)[name].apply(_cdpService, [this.id].concat(args));
  };
  return acc;
}, {}));