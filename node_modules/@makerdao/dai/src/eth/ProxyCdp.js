'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _contracts = require('../../contracts/contracts');

var _contracts2 = _interopRequireDefault(_contracts);

var _ethers = require('ethers');

var _Currency = require('./Currency');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ProxyCdp = function () {
  function ProxyCdp(cdpService, dsProxyAddress, cdpId) {
    var _this = this;

    (0, _classCallCheck3.default)(this, ProxyCdp);

    this._cdpService = cdpService;
    this._smartContractService = this._cdpService.get('smartContract');
    this._transactionManager = this._smartContractService.get('transactionManager');

    if (dsProxyAddress) {
      this.dsProxyAddress = dsProxyAddress.toLowerCase();
    }

    if (!cdpId) {
      this._create();
    } else {
      this.id = _promise2.default.resolve(cdpId);
    }

    this._emitterInstance = this._cdpService.get('event').buildEmitter();
    this.on = this._emitterInstance.on;
    this._emitterInstance.registerPollEvents({
      COLLATERAL: {
        USD: function USD() {
          return _this.getCollateralValue(_Currency.USD);
        },
        ETH: function ETH() {
          return _this.getCollateralValue();
        }
      },
      DEBT: {
        dai: function dai() {
          return _this.getDebtValue();
        }
      }
    });
  }

  (0, _createClass3.default)(ProxyCdp, [{
    key: '_getDsProxyAddress',
    value: function _getDsProxyAddress() {
      var dsProxyFactoryContract = this._smartContractService.getContractByName(_contracts2.default.DS_PROXY_FACTORY);
      var currentAccount = this._smartContractService.get('web3').currentAccount();

      var self = this;
      return new _promise2.default(function (resolve) {
        // sender = ProxyRegistry, owner = you, proxy = new DSProxy address, cache = DSProxyCache
        // eslint-disable-next-line
        dsProxyFactoryContract.oncreated = function (sender, owner, proxy, cache) {
          if (currentAccount.toLowerCase() == owner.toLowerCase()) {
            this.removeListener();
            self.dsProxyAddress = proxy.toLowerCase();
            resolve(self.getDsProxyAddress);
          }
        };
      });
    }
  }, {
    key: '_getCdpId',
    value: function _getCdpId(saiProxyAddress, tubContract, dsProxyAddressPromise) {
      var _this2 = this;

      return new _promise2.default(function (resolve) {
        // If using an existing DSProxy, listen for the LogNewCup event
        var existingDsProxyAddress = _this2.dsProxyAddress;
        if (existingDsProxyAddress) {
          tubContract.onlognewcup = function (address, cdpIdBytes32) {
            if (existingDsProxyAddress == address.toLowerCase()) {
              var cdpId = _ethers.utils.bigNumberify(cdpIdBytes32).toNumber();
              this.removeListener();
              resolve(cdpId);
            }
          };
        }
        // If a new DSProxy instance is being created at the same time as the cup,
        // listen for the give event (via DSNote) rather than the LogNewCup event
        else {
            var provider = _this2._smartContractService.get('web3').ethersProvider();
            var topics = [_ethers.utils.id('give(bytes32,address)').substring(0, 10) + '0'.repeat(56), '0x000000000000000000000000' + saiProxyAddress.substring(2)
            // '0x000000000000000000000000' + proxy.substring(2)
            ];
            provider.on(topics, function (log) {
              _promise2.default.resolve(dsProxyAddressPromise).then(function () {
                var proxyInLog = '0x' + log.topics[3].substr(26).toLowerCase();
                if (_this2.dsProxyAddress === proxyInLog) {
                  resolve(_ethers.utils.bigNumberify(log.topics[2]).toNumber());
                }
              });
            });
          }
      });
    }
  }, {
    key: '_create',
    value: function _create() {
      var _this3 = this;

      var tub = this._smartContractService.getContractByName(_contracts2.default.SAI_TUB);
      var saiProxy = this._smartContractService.getContractByName(_contracts2.default.SAI_PROXY);

      var method = void 0,
          args = void 0,
          dsProxyAddressPromise = void 0;
      if (!this.dsProxyAddress) {
        var proxyRegistryAddress = this._smartContractService.getContractAddressByName(_contracts2.default.PROXY_REGISTRY);

        method = 'createAndOpen';
        args = [proxyRegistryAddress, tub.address, { promise: promise }];
        dsProxyAddressPromise = this._getDsProxyAddress();
      } else {
        method = 'open';
        args = [tub.address, { dsProxyAddress: this.dsProxyAddress, promise: promise }];
      }

      var promise = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var results;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return 0;

              case 2:
                _context.next = 4;
                return _promise2.default.all([_this3._getCdpId(saiProxy.address, tub, dsProxyAddressPromise), saiProxy[method].apply(saiProxy, (0, _toConsumableArray3.default)(args))]);

              case 4:
                results = _context.sent;

                _this3.id = results[0];
                return _context.abrupt('return', _this3);

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this3);
      }))();
      this._transactionObject = promise;
    }
  }, {
    key: 'transactionObject',
    value: function transactionObject() {
      return this._transactionObject;
    }
  }, {
    key: 'getId',
    value: function getId() {
      console.warn('getId() is deprecated; use the .id property instead');
      return _promise2.default.resolve(this.id);
    }
  }, {
    key: 'getDsProxyAddress',
    value: function getDsProxyAddress() {
      console.warn('getDsProxyAddress() is deprecated; use the .dsProxyAddress property instead');
      return _promise2.default.resolve(this.dsProxyAddress);
    }
  }]);
  return ProxyCdp;
}();

// Each of these passthrough methods gets called on the EthereumCdpService
// If the second array item is true then the method name with 'Proxy' appended is
// called and the DSProxy address and CDP id are passed as the first and second arg
// Otherwise the method name is called and the just CDP id is passed


exports.default = ProxyCdp;
var passthroughMethods = [['bite', false], ['drawDai', true], ['enoughMkrToWipe', false], ['freeEth', true],
// 'freePeth',
['getCollateralValue', false], ['getCollateralizationRatio', false], ['getDebtValue', false], ['getGovernanceFee', false], ['getInfo', false], ['getLiquidationPrice', false], ['isSafe', false], ['give', true], ['lockEth', true],
// 'lockPeth',
// 'lockWeth',
['shut', true], ['wipeDai', true]];

(0, _assign2.default)(ProxyCdp.prototype, passthroughMethods.reduce(function (acc, _ref2) {
  var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),
      name = _ref3[0],
      useProxy = _ref3[1];

  acc[name] = useProxy ? function () {
    var _cdpService;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_cdpService = this._cdpService)[name + 'Proxy'].apply(_cdpService, [this.dsProxyAddress, this.id].concat(args));
  } : function () {
    var _cdpService2;

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return (_cdpService2 = this._cdpService)[name].apply(_cdpService2, [this.id].concat(args));
  };

  return acc;
}, {}));